{"ast":null,"code":"var _jsxFileName = \"/Users/tenchu1109/Desktop/React project/project2-task-manager/src/App.js\";\nimport React, { Component } from 'react';\nimport Search from './Components/Search';\nimport TaskForm from './Components/TaskForm';\nimport Control from './Components/Control';\nimport Sort from './Components/Sort';\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.generateDate = () => {\n      var tasks = [{\n        id: this.createID(),\n        name: \"html\",\n        status: true\n      }, {\n        id: this.createID(),\n        name: \"CSS\",\n        status: false\n      }, {\n        id: this.createID(),\n        name: \"Angular\",\n        status: true\n      }];\n      console.log(tasks);\n      this.setState({\n        tasks: tasks\n      });\n      localStorage.setItem('tasks', JSON.stringify(tasks));\n    };\n\n    this.randomString = () => {\n      var randomstring = require(\"randomstring\");\n\n      return randomstring.generate();\n    };\n\n    this.createID = () => {\n      return this.randomString() + \"-\" + this.randomString();\n    };\n\n    this.ChangeDisplay = () => {\n      console.log(\"sss\");\n      this.setState({\n        isDisplayForm: !this.state.isDisplayForm\n      });\n    };\n\n    this.onReceive = data => {\n      var newtask = this.state.tasks;\n      data.id = this.createID();\n      newtask.push(data);\n      this.setState({\n        tasks: newtask\n      });\n      localStorage.setItem(\"tasks\", JSON.stringify(newtask));\n    };\n\n    this.OnCloseTaskForm = () => {\n      this.setState({\n        isDisplayForm: false\n      });\n    };\n\n    this.changeStatus = id => {\n      var tasks = this.state.tasks;\n      var index = this.findIndex(id);\n\n      if (index !== -1) {\n        tasks[index].status = !tasks[index].status;\n      }\n\n      this.setState({\n        tasks: tasks\n      });\n      localStorage.setItem(\"tasks\", JSON.stringify(tasks)); //console.log(id);\n    };\n\n    this.deleteTask = id => {\n      var tasks = this.state.tasks;\n      var index = this.findIndex(id);\n      console.log(index);\n\n      if (index != -1) {\n        tasks.splice(index, 1);\n        this.setState({\n          tasks,\n          tasks\n        });\n        localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n      }\n\n      this.OnCloseTaskForm();\n    };\n\n    this.state = {\n      tasks: [],\n      isDisplayForm: true\n    };\n  }\n\n  componentWillMount() {\n    if (localStorage && localStorage.getItem('tasks')) {\n      var tasks = JSON.parse(localStorage.getItem('tasks'));\n      this.setState({\n        tasks: tasks\n      });\n    }\n  }\n\n  findIndex(id) {\n    var tasks = this.state.tasks;\n    var result = -1;\n    tasks.map((task, index) => {\n      //console.log(task[index].id);\n      if (id === task.id) {\n        result = index;\n      }\n    });\n    return result;\n  }\n\n  render() {\n    var _this$state = this.state,\n        tasks = _this$state.tasks,\n        isDisplayForm = _this$state.isDisplayForm; //var tasks = this.state.tasks\n\n    var elmTaskForm = isDisplayForm ? React.createElement(TaskForm, {\n      onRecieveCloseTaskForm: this.OnCloseTaskForm,\n      onReceive: this.onReceive,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }) : \"\";\n    return React.createElement(\"div\", {\n      className: \"container border border-danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"Task Manager\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: isDisplayForm === true ? \"col-xs-4 col-md-4  col-lg-4\" : \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, elmTaskForm), React.createElement(\"div\", {\n      className: isDisplayForm === true ? \"col-xs-8 col-md-8 col-lg-8\" : \"col-xs-12 col-md-12 col-lg-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      type: \"button\",\n      onClick: this.ChangeDisplay,\n      \"aria-expanded\": \"false\",\n      \"aria-controls\": \"contentId\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"Add\"), React.createElement(\"button\", {\n      className: \"btn btn-danger\",\n      onClick: this.generateDate,\n      type: \"button\",\n      \"aria-expanded\": \"false\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Generate Data\")), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(Search, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }), React.createElement(Sort, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(Control, {\n      changeStatus: this.changeStatus,\n      tasks: tasks,\n      deleteTask: this.deleteTask,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    })))));\n  }\n\n}\nexport default App;","map":{"version":3,"sources":["/Users/tenchu1109/Desktop/React project/project2-task-manager/src/App.js"],"names":["React","Component","Search","TaskForm","Control","Sort","App","constructor","props","generateDate","tasks","id","createID","name","status","console","log","setState","localStorage","setItem","JSON","stringify","randomString","randomstring","require","generate","ChangeDisplay","isDisplayForm","state","onReceive","data","newtask","push","OnCloseTaskForm","changeStatus","index","findIndex","deleteTask","splice","componentWillMount","getItem","parse","result","map","task","render","elmTaskForm"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n\nimport Search from './Components/Search'\nimport TaskForm from './Components/TaskForm'\nimport Control from './Components/Control';\nimport Sort from './Components/Sort';\n\nexport class App extends Component {\n            constructor(props) {\n                super(props)\n                this.state = {\n                     tasks:[],\n                     isDisplayForm:true\n                }\n            }\n            componentWillMount(){\n                if(localStorage && localStorage.getItem('tasks'))\n                {\n                    var tasks = JSON.parse(localStorage.getItem('tasks'));\n                    this.setState({\n                        tasks:tasks\n                    });\n                }\n            }\n            generateDate = () =>{\n                var tasks= [\n                    {\n                        id: this.createID(),\n                        name: \"html\",\n                        status: true\n                    },\n                    {\n                        id: this.createID(),\n                        name: \"CSS\",\n                        status: false\n                    },\n                    {\n                        id: this.createID(),\n                        name: \"Angular\",\n                        status: true\n                    }\n                ];\n                console.log(tasks);\n                this.setState({\n                    tasks : tasks\n                });\n                localStorage.setItem('tasks',JSON.stringify(tasks));\n            };\n            \n            randomString = () => {\n                var randomstring = require(\"randomstring\");\n                return randomstring.generate();\n            }\n\n            createID = () =>{\n                return this.randomString()+\"-\"+this.randomString();\n            }\n\n            ChangeDisplay =()=>{\n                console.log(\"sss\");\n                this.setState({isDisplayForm:!this.state.isDisplayForm});\n            }\n\n            onReceive = (data) => {\n                \n                    var newtask=this.state.tasks;\n                    data.id=this.createID();\n                    newtask.push(data);\n                    this.setState({\n                        tasks:newtask\n                    });\n                    localStorage.setItem(\"tasks\",JSON.stringify(newtask));\n                }\n\n            OnCloseTaskForm  = () => \n            {\n                   this.setState({isDisplayForm:false});\n            } \n\n            changeStatus =(id)=>{\n                var {tasks}=this.state;\n                var index=this.findIndex(id);\n                if(index!==-1)\n                {\n                    tasks[index].status=!tasks[index].status;\n\n                }\n                this.setState({tasks:tasks});\n                localStorage.setItem(\"tasks\",JSON.stringify(tasks));\n                \n                \n                //console.log(id);\n                }\n            findIndex(id)\n            {\n                var {tasks} = this.state;\n                var result=-1;\n                tasks.map((task,index) => {\n                    //console.log(task[index].id);\n                    if(id===task.id)\n                    {\n                        result=index; \n                    }\n                });\n                return result;\n            }\n            deleteTask = (id) =>\n            {\n                var tasks=this.state.tasks;\n                var index=this.findIndex(id);\n                console.log(index);\n                if(index!=-1)\n                {\n                    tasks.splice(index,1);\n                    this.setState({tasks,tasks});\n                    localStorage.setItem(\"tasks\",JSON.stringify(tasks));\n                }\n                this.OnCloseTaskForm();\n                \n                \n\n            }\n  render() {\n           var {tasks,isDisplayForm} = this.state; //var tasks = this.state.tasks\n           var elmTaskForm = isDisplayForm  ? <TaskForm onRecieveCloseTaskForm={this.OnCloseTaskForm} onReceive={this.onReceive}/> : \"\"  ;\n    return (\n        <div className=\"container border border-danger\">\n          <h1 className=\"text-center\">Task Manager</h1>\n          <hr></hr>\n        {/** top page */}\n        {/**start of page */}\n        <div className=\"row\">\n            <div className={isDisplayForm===true ? \"col-xs-4 col-md-4  col-lg-4\" : \"\"} >\n                {elmTaskForm}\n            </div>\n            <div className={isDisplayForm===true ? \"col-xs-8 col-md-8 col-lg-8\" : \"col-xs-12 col-md-12 col-lg-12\"}>\n                <p>\n                    <button className=\"btn btn-primary\" type=\"button\" onClick={this.ChangeDisplay} aria-expanded=\"false\"\n                            aria-controls=\"contentId\">\n                        Add\n                    </button>\n                    <button className=\"btn btn-danger\" onClick={this.generateDate} type=\"button\"  aria-expanded=\"false\">\n                        Generate Data\n                    </button>\n                </p>\n                <div className=\"row\">\n                    <Search />\n                    <Sort />\n                </div>\n                \n                <div className=\"row\">\n                    <Control \n                        changeStatus={this.changeStatus} \n                        tasks={tasks}\n                        deleteTask={this.deleteTask}\n                    />\n                </div>\n            </div>\n        </div>\n            \n\n\n        </div>\n    )\n  }\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}