{"version":3,"sources":["Components/Search.js","Components/TaskForm.js","Components/TaskItem.js","Components/Control.js","Components/Sort.js","App.js","serviceWorker.js","index.js"],"names":["Search","className","type","placeholder","aria-label","aria-describedby","id","Component","TaskForm","props","onHandleChange","event","target","name","value","console","log","setState","onCloseForm","onRecieveCloseTaskForm","onSubmit","preventDefault","state","status","onClear","onReceive","this","task","onChange","onClick","TaskItem","changeStatus","deleteTask","changeTask","index","role","Control","elmtasks","tasks","map","key","Sort","App","generateDate","createID","localStorage","setItem","JSON","stringify","randomString","require","generate","data","undefined","push","findIndex","taskEditting","ChangeDisplay","isDisplayForm","OnCloseTaskForm","OnShowTaskForm","newtasks","splice","getItem","parse","result","elmTaskForm","aria-expanded","aria-controls","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0ab87106.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport class Search extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                    \r\n                    <div className=\"col-xs-6 col-ms-6\">\r\n                            <div className=\"input-group mb-3\">\r\n                                <input type=\"text\" className=\"form-control\" placeholder=\"Search...\" \r\n                                    aria-label=\"Recipient's username\" aria-describedby=\"basic-addon2\"></input>\r\n                                <div className=\"input-group-append\">\r\n                                <span className=\"input-group-text \" id=\"basic-addon2\">Find</span>\r\n                                </div>\r\n                            </div>\r\n                    </div>\r\n                    \r\n   \r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Search\r\n","import React, { Component } from 'react'\r\n\r\n\r\nexport class TaskForm extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n            id:\"\",\r\n            name:\"\",\r\n            status:\"false\"\r\n        }\r\n    }\r\n    componentWillMount()\r\n    {\r\n        \r\n        if(this.props.task)\r\n        {\r\n            this.setState({\r\n                id:this.props.task.id,\r\n                name:this.props.task.name,\r\n                status:this.props.task.status\r\n            });\r\n            \r\n        }\r\n    }\r\n    onHandleChange= (event) =>{\r\n        var target =  event.target;\r\n        var name = target.name;\r\n        var value = target.value;\r\n        console.log(value);\r\n        if(name===\"status\")\r\n            value===\"true\" ? value=true : value=false;  \r\n        this.setState({\r\n            [name]:value\r\n        })\r\n    }\r\n    onCloseForm = () =>{\r\n        this.props.onRecieveCloseTaskForm();\r\n    }\r\n    onSubmit = (event) =>{\r\n        event.preventDefault();\r\n        \r\n        if(this.state.name==='' || this.state.status==='')\r\n        {\r\n            this.onClear();\r\n            this.onCloseForm();\r\n        }\r\n        else\r\n        {\r\n            this.props.onReceive(this.state);\r\n            this.onClear();\r\n            this.onCloseForm();\r\n        }\r\n        \r\n        //console.log(this.state);\r\n        \r\n       \r\n       \r\n\r\n    }\r\n    onClear = () => {\r\n        this.setState({\r\n            name:'',\r\n            status:false\r\n        });\r\n        this.onCloseForm();\r\n    }\r\n        \r\n    render() {\r\n            var {id}=this.state;\r\n        return (\r\n            <div >\r\n                \r\n                    <form className=\"form-group  \" onSubmit={this.onSubmit}>\r\n                      \r\n                        <label ><h2>Task Option</h2></label><br></br>\r\n                        <label ><h3>Name: </h3></label>\r\n                        <input \r\n                                type=\"text\" \r\n                                onChange={this.onHandleChange} \r\n                                value={this.state.name}\r\n                                name=\"name\"className=\"form-control\" placeholder=\"\" aria-describedby=\"helpId\"></input>\r\n                        <label><h3>Status: </h3></label>\r\n                    <div className=\"form-group text-center \" >\r\n                    \r\n                        <select className=\"form-control\" \r\n                            name=\"status\" \r\n                            value={this.state.status} \r\n                            onChange={this.onHandleChange}>\r\n\r\n                        <option >Choose One</option>\r\n                        <option value={false}>Hidden</option>\r\n                        <option value={true}>Active</option>\r\n                        \r\n                        </select><br></br>\r\n                        <button className=\"btn btn-warning\" type=\"submit\" >Save</button>\r\n                        <button className=\"btn btn-danger\" \r\n                                type=\"reset\"\r\n                                onClick={this.onClear}>Cancel</button>\r\n                        \r\n                    </div>\r\n                    </form>\r\n                    </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default TaskForm\r\n","import React, { Component } from 'react'\r\n\r\nexport class TaskItem extends Component {\r\n    changeStatus = () =>{\r\n        this.props.changeStatus(this.props.task.id);\r\n        //console.log(this.props.task.id);\r\n    }\r\n\r\n    deleteTask = () =>{\r\n        this.props.deleteTask(this.props.task.id);\r\n    }\r\n    changeTask = () => {\r\n        this.props.changeTask(this.props.task.id);\r\n    }\r\n    render() {\r\n        var {task , index }=this.props;\r\n        return (\r\n            \r\n                <tr>\r\n                            \r\n                            <td>{index+1}</td>\r\n                            <td>{task.name}</td>\r\n                            <td className=\"text-center\">\r\n                                <span \r\n                                className={task.status===true ? \" badge badge-success\" : \" badge badge-danger\"}\r\n                                onClick={this.changeStatus}\r\n                                >\r\n                                {task.status===true ? \"active\" : \"hidden\" }</span>\r\n                            </td>\r\n                            <td className=\"text-center\">\r\n                                <div className=\"btn-group\" role=\"group\" aria-label=\"\">\r\n                                    <button type=\"button\"\r\n                                            className=\"btn btn-warning\"\r\n                                            onClick={this.changeTask}\r\n                                    >Change\r\n                                    </button> \r\n                                    \r\n                                    <button type=\"button\" className=\"btn btn-danger\" \r\n                                    onClick={this.deleteTask}\r\n                                    >Delete</button>\r\n                                    \r\n                                </div>\r\n\r\n                            </td>\r\n                </tr> \r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default TaskItem\r\n","import React, { Component } from 'react'\r\nimport TaskItem from './TaskItem'\r\n\r\nexport class Control extends Component {\r\n   \r\n    \r\n    render() {\r\n        var {tasks} = this.props;\r\n        var elmtasks=tasks.map((tasks,index) => {\r\n            return <TaskItem changeStatus={this.props.changeStatus} \r\n                            deleteTask={this.props.deleteTask}\r\n                            key={tasks.id} index={index} task={tasks}\r\n                            changeTask={this.props.changeTask}\r\n                    />;\r\n        });\r\n        return (\r\n            <div className=\"container-fluid\">\r\n                <table className=\"table table-bordered\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>ID</th>\r\n                            <th>Name</th>\r\n                            <th>Status</th>\r\n                            <th>Action</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td ></td>\r\n                            <td>    \r\n                                <input type=\"text\" className=\"form-control\" name=\"\"  aria-describedby=\"helpId\" placeholder=\"\"></input>\r\n                            </td>\r\n                            <td>    \r\n                                <select className=\"form-control\" name=\"\" >\r\n                                    <option>All</option>\r\n                                    <option>Hidden</option>\r\n                                    <option>Active</option>\r\n                                </select>\r\n                            </td>\r\n                            <td></td>\r\n                        </tr>\r\n                            {elmtasks}\r\n                    </tbody>\r\n                </table> \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Control\r\n","import React, { Component } from 'react'\r\n\r\n\r\nexport class Sort extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"col-xs-6 col-ms-6\">\r\n                          <select className=\"form-control\" name=\"\" >\r\n                            <option>A-Z</option>\r\n                            <option>Z-A</option>\r\n                            <option>Show Active</option>\r\n                            <option>Show Hidden</option>\r\n                          </select>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Sort\r\n","import React, { Component } from 'react'\r\nimport randomString from \"randomstring\";\r\nimport Search from './Components/Search';\r\nimport TaskForm from './Components/TaskForm';\r\nimport Control from './Components/Control';\r\nimport Sort from './Components/Sort';\r\n\r\n\r\nexport class App extends Component {\r\n            constructor(props) {\r\n                super(props)\r\n                this.state = {\r\n                     tasks:[],\r\n                     taskEditting:[],\r\n                     isDisplayForm:false\r\n                }\r\n            }\r\n            componentWillMount(){\r\n                if(localStorage && localStorage.getItem('tasks'))\r\n                {\r\n                    var tasks = JSON.parse(localStorage.getItem('tasks'));\r\n                    this.setState({\r\n                        tasks:tasks\r\n                    });\r\n                }\r\n            }\r\n            generateDate = () =>{\r\n                var tasks= [\r\n                    {\r\n                        id: this.createID(),\r\n                        name: \"html\",\r\n                        status: true\r\n                    },\r\n                    {\r\n                        id: this.createID(),\r\n                        name: \"CSS\",\r\n                        status: false\r\n                    },\r\n                    {\r\n                        id: this.createID(),\r\n                        name: \"Angular\",\r\n                        status: true\r\n                    }\r\n                ];\r\n                console.log(tasks);\r\n                this.setState({\r\n                    tasks : tasks\r\n                });\r\n                localStorage.setItem('tasks',JSON.stringify(tasks));\r\n            };\r\n            \r\n            randomString = () => {\r\n                var randomstring = require(\"randomstring\");\r\n                return randomstring.generate();\r\n            }\r\n\r\n            createID = () =>{\r\n                return this.randomString()+\"-\"+this.randomString();\r\n            }\r\n\r\n            \r\n\r\n            onReceive = (data) => {\r\n                \r\n                    var tasks=this.state.tasks;\r\n                    if(data.id===\"\" || data.id===undefined)\r\n                    {\r\n                        data.id=this.createID();\r\n                        tasks.push(data);\r\n                    }\r\n                    else\r\n                    {\r\n                        var index = this.findIndex(data.id)\r\n                        tasks[index]=data;\r\n                    }\r\n                    this.setState({\r\n                        tasks:tasks,\r\n                        taskEditting:null\r\n                    });\r\n                    localStorage.setItem(\"tasks\",JSON.stringify(tasks));\r\n                }\r\n\r\n            ChangeDisplay =()=>{\r\n            \r\n                this.setState({isDisplayForm:!this.state.isDisplayForm});\r\n            }\r\n        \r\n            OnCloseTaskForm  = () => \r\n            {\r\n                   this.setState({isDisplayForm:false});\r\n            } \r\n            OnShowTaskForm = () => \r\n            {\r\n                this.setState({isDisplayForm:true});\r\n            }\r\n\r\n            changeStatus =(id)=>{\r\n                var {tasks}=this.state;\r\n                var index=this.findIndex(id);\r\n                if(index!==-1)\r\n                {\r\n                    tasks[index].status=!tasks[index].status;\r\n\r\n                }\r\n                this.setState({tasks:tasks});\r\n                localStorage.setItem(\"tasks\",JSON.stringify(tasks));\r\n                \r\n                \r\n                //console.log(id);\r\n                }\r\n            findIndex(id)\r\n            {\r\n                var {tasks} = this.state;\r\n                var result=-1;\r\n                tasks.map((task,index) => {\r\n                    //console.log(task[index].id);\r\n                    if(id===task.id)\r\n                    {\r\n                        result=index; \r\n                    }\r\n                });\r\n                return result;\r\n            }\r\n            deleteTask = (id) =>\r\n            {\r\n                var newtasks=this.state.tasks;\r\n                var index=this.findIndex(id);\r\n                if(index!==-1)\r\n                {\r\n                    newtasks.splice(index,1);\r\n                    this.setState({tasks:newtasks});\r\n                    localStorage.setItem(\"tasks\",JSON.stringify(newtasks));\r\n                }\r\n                this.OnCloseTaskForm();\r\n            }\r\n\r\n            changeTask = (id) => {\r\n\r\n                this.OnShowTaskForm();\r\n                var {tasks} = this.state;\r\n                var index=this.findIndex(id);\r\n                var taskEditting=tasks[index];\r\n                this.setState({taskEditting:taskEditting});\r\n\r\n\r\n            }\r\n  render() {\r\n           var {tasks,isDisplayForm,taskEditting} = this.state; //var tasks = this.state.tasks\r\n           var elmTaskForm = isDisplayForm  ? \r\n           <TaskForm onRecieveCloseTaskForm={this.OnCloseTaskForm} \r\n                    task={taskEditting}\r\n                    onReceive={this.onReceive}\r\n\r\n            /> : \"\"  ;\r\n    return (\r\n        <div className=\"container border border-danger\">\r\n          <h1 className=\"text-center\">Task Manager</h1>\r\n          <hr></hr>\r\n        {/** top page */}\r\n        {/**start of page */}\r\n        <div className=\"row \">\r\n            <div className={this.state.isDisplayForm===true ? \"col-xs-4 col-md-4  col-lg-4 \" : \"\"} >\r\n                {elmTaskForm}\r\n            </div>\r\n            <div className={this.state.isDisplayForm===true ? \"col-xs-8 col-md-8 col-lg-8 \" : \"col-xs-12 col-md-12 col-lg-12\"}>\r\n                \r\n                <p>\r\n                    <button className=\"btn btn-success\" type=\"button\" onClick={this.ChangeDisplay} aria-expanded=\"false\"\r\n                            aria-controls=\"contentId\">\r\n                        Add\r\n                    </button>\r\n                    <button className=\"btn btn-danger ml-3\" onClick={this.generateDate} type=\"button\"  aria-expanded=\"false\">\r\n                        Generate Data\r\n                    </button>\r\n                </p>\r\n                <div className=\"row\">\r\n                    \r\n                        <div className=\"col-xs-12 col-md-6\">\r\n                            <Search />\r\n                        </div>\r\n                        <div className=\"col-xs-12 col-md-6\">\r\n                            <Sort />\r\n                        </div> \r\n                    \r\n                </div>\r\n                \r\n                <div className=\"row mt-3\">\r\n                    <Control \r\n                        changeStatus={this.changeStatus} \r\n                        tasks={tasks}\r\n                        deleteTask={this.deleteTask}\r\n                        changeTask={this.changeTask}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n            \r\n\r\n\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}