{"version":3,"sources":["Components/Search.js","Components/TaskForm.js","Components/TaskItem.js","Components/Control.js","Components/Sort.js","App.js","serviceWorker.js","index.js"],"names":["Search","className","type","placeholder","aria-label","aria-describedby","id","Component","TaskForm","props","onHandleChange","event","target","name","value","console","log","setState","onCloseForm","onRecieveCloseTaskForm","onSubmit","preventDefault","state","onReceive","onClear","status","this","task","onChange","onClick","TaskItem","changeStatus","deleteTask","changeTask","index","role","Control","elmtasks","tasks","map","key","Sort","App","generateDate","createID","localStorage","setItem","JSON","stringify","randomString","require","generate","data","undefined","push","findIndex","taskEditting","ChangeDisplay","isDisplayForm","OnCloseTaskForm","OnShowTaskForm","newtasks","splice","getItem","parse","result","elmTaskForm","aria-expanded","aria-controls","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2QAwBeA,EAtBf,iLAEQ,OACI,6BAEQ,yBAAKC,UAAU,qBACP,yBAAKA,UAAU,oBACX,2BAAOC,KAAK,OAAOD,UAAU,eAAeE,YAAY,YACpDC,aAAW,uBAAuBC,mBAAiB,iBACvD,yBAAKJ,UAAU,sBACf,0BAAMA,UAAU,mBAAmBK,GAAG,gBAAtC,gBAVhC,GAA4BC,a,QC+FbC,EA9Ff,YACI,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAqBVC,eAAgB,SAACC,GACb,IAAIC,EAAUD,EAAMC,OAChBC,EAAOD,EAAOC,KACdC,EAAQF,EAAOE,MACnBC,QAAQC,IAAIF,GACF,WAAPD,IACkBC,EAAT,SAARA,GACJ,EAAKG,SAAL,eACKJ,EAAMC,KA9BI,EAiCnBI,YAAc,WACV,EAAKT,MAAMU,0BAlCI,EAoCnBC,SAAW,SAACT,GACRA,EAAMU,iBACNN,QAAQC,IAAI,EAAKM,OACjB,EAAKb,MAAMc,UAAU,EAAKD,OAC1B,EAAKE,UACL,EAAKN,eAzCU,EA6CnBM,QAAU,WACN,EAAKP,SAAS,CACVJ,KAAK,GACLY,QAAO,IAEX,EAAKP,eA/CL,EAAKI,MAAQ,CACThB,GAAG,GACHO,KAAK,GACLY,OAAO,SANI,EADvB,kFAaWC,KAAKjB,MAAMkB,MAEVD,KAAKT,SAAS,CACVX,GAAGoB,KAAKjB,MAAMkB,KAAKrB,GACnBO,KAAKa,KAAKjB,MAAMkB,KAAKd,KACrBY,OAAOC,KAAKjB,MAAMkB,KAAKF,WAlBvC,+BAuDqBC,KAAKJ,MAAThB,GACT,OACI,6BAEQ,0BAAML,UAAU,eAAemB,SAAUM,KAAKN,UAE1C,+BAAQ,4CAA4B,6BACpC,+BAAQ,uCACR,2BACQlB,KAAK,OACL0B,SAAUF,KAAKhB,eACfI,MAAOY,KAAKJ,MAAMT,KAClBA,KAAK,OAAMZ,UAAU,eAAeE,YAAY,GAAGE,mBAAiB,WAC5E,+BAAO,yCACX,yBAAKJ,UAAU,2BAEX,4BAAQA,UAAU,eACdY,KAAK,SACLC,MAAOY,KAAKJ,MAAMG,OAClBG,SAAUF,KAAKhB,gBAEnB,8CACA,4BAAQI,OAAO,GAAf,UACA,4BAAQA,OAAO,GAAf,WAES,6BACT,4BAAQb,UAAU,kBAAkBC,KAAK,UAAzC,QACA,4BAAQD,UAAU,iBACVC,KAAK,QACL2B,QAASH,KAAKF,SAFtB,iBAlFxB,GAA8BjB,aC+CfuB,EAhDf,2MACIC,aAAe,WACX,EAAKtB,MAAMsB,aAAa,EAAKtB,MAAMkB,KAAKrB,KAFhD,EAMI0B,WAAa,WACT,EAAKvB,MAAMuB,WAAW,EAAKvB,MAAMkB,KAAKrB,KAP9C,EASI2B,WAAa,WACT,EAAKxB,MAAMwB,WAAW,EAAKxB,MAAMkB,KAAKrB,KAV9C,wEAYc,IAAD,EACeoB,KAAKjB,MAApBkB,EADA,EACAA,KAAOO,EADP,EACOA,MACZ,OAEQ,4BAEY,4BAAKA,EAAM,GACX,4BAAKP,EAAKd,MACV,wBAAIZ,UAAU,eACV,0BACAA,WAAyB,IAAd0B,EAAKF,OAAgB,uBAAyB,sBACzDI,QAASH,KAAKK,eAEC,IAAdJ,EAAKF,OAAgB,SAAW,WAErC,wBAAIxB,UAAU,eACV,yBAAKA,UAAU,YAAYkC,KAAK,QAAQ/B,aAAW,IAC/C,4BAAQF,KAAK,SACLD,UAAU,kBACV4B,QAASH,KAAKO,YAFtB,UAMA,4BAAQ/B,KAAK,SAASD,UAAU,iBAChC4B,QAASH,KAAKM,YADd,iBAnCpC,GAA8BzB,aC+Cf6B,EA9Cf,iLAGc,IAAD,OAEDC,EADUX,KAAKjB,MAAd6B,MACcC,KAAI,SAACD,EAAMJ,GAC1B,OAAO,kBAAC,EAAD,CAAUH,aAAc,EAAKtB,MAAMsB,aAC1BC,WAAY,EAAKvB,MAAMuB,WACvBQ,IAAKF,EAAMhC,GAAI4B,MAAOA,EAAOP,KAAMW,EACnCL,WAAY,EAAKxB,MAAMwB,gBAG3C,OACI,yBAAKhC,UAAU,mBACX,2BAAOA,UAAU,wBACb,+BACI,4BACI,kCACA,oCACA,sCACA,wCAGR,+BACI,4BACI,6BACA,4BACI,2BAAOC,KAAK,OAAOD,UAAU,eAAeY,KAAK,GAAIR,mBAAiB,SAASF,YAAY,MAE/F,4BACI,4BAAQF,UAAU,eAAeY,KAAK,IAClC,uCACA,0CACA,4CAGR,8BAECwB,SAtC7B,GAA6B9B,aCiBdkC,EAjBf,iLAEQ,OACI,6BACI,yBAAKxC,UAAU,qBACL,4BAAQA,UAAU,eAAeY,KAAK,IACpC,uCACA,uCACA,+CACA,sDAT5B,GAA0BN,aCmMXmC,EA9Lf,YACY,WAAYjC,GAAQ,IAAD,8BACf,4CAAMA,KAgBVkC,aAAe,WACX,IAAIL,EAAO,CACP,CACIhC,GAAI,EAAKsC,WACT/B,KAAM,OACNY,QAAQ,GAEZ,CACInB,GAAI,EAAKsC,WACT/B,KAAM,MACNY,QAAQ,GAEZ,CACInB,GAAI,EAAKsC,WACT/B,KAAM,UACNY,QAAQ,IAGhBV,QAAQC,IAAIsB,GACZ,EAAKrB,SAAS,CACVqB,MAAQA,IAEZO,aAAaC,QAAQ,QAAQC,KAAKC,UAAUV,KAvC7B,EA0CnBW,aAAe,WAEX,OADmBC,EAAQ,IACPC,YA5CL,EA+CnBP,SAAW,WACP,OAAO,EAAKK,eAAe,IAAI,EAAKA,gBAhDrB,EAqDnB1B,UAAY,SAAC6B,GAEL,IAAId,EAAM,EAAKhB,MAAMgB,MACR,KAAVc,EAAK9C,SAAqB+C,IAAVD,EAAK9C,IAEpB8C,EAAK9C,GAAG,EAAKsC,WACbN,EAAMgB,KAAKF,IAKXd,EADY,EAAKiB,UAAUH,EAAK9C,KACnB8C,EAEjB,EAAKnC,SAAS,CACVqB,MAAMA,EACNkB,aAAa,OAEjBX,aAAaC,QAAQ,QAAQC,KAAKC,UAAUV,KAtEjC,EAyEnBmB,cAAe,WAEX,EAAKxC,SAAS,CAACyC,eAAe,EAAKpC,MAAMoC,iBA3E1B,EA8EnBC,gBAAmB,WAEZ,EAAK1C,SAAS,CAACyC,eAAc,KAhFjB,EAkFnBE,eAAiB,WAEb,EAAK3C,SAAS,CAACyC,eAAc,KApFd,EAuFnB3B,aAAc,SAACzB,GAAM,IACZgC,EAAO,EAAKhB,MAAZgB,MACDJ,EAAM,EAAKqB,UAAUjD,IACb,IAAT4B,IAECI,EAAMJ,GAAOT,QAAQa,EAAMJ,GAAOT,QAGtC,EAAKR,SAAS,CAACqB,MAAMA,IACrBO,aAAaC,QAAQ,QAAQC,KAAKC,UAAUV,KAhG7B,EAkHnBN,WAAa,SAAC1B,GAEV,IAAIuD,EAAS,EAAKvC,MAAMgB,MACpBJ,EAAM,EAAKqB,UAAUjD,IACb,IAAT4B,IAEC2B,EAASC,OAAO5B,EAAM,GACtB,EAAKjB,SAAS,CAACqB,MAAMuB,IACrBhB,aAAaC,QAAQ,QAAQC,KAAKC,UAAUa,KAEhD,EAAKF,mBA5HU,EA+HnB1B,WAAa,SAAC3B,GAEV,EAAKsD,iBAFY,IAKbJ,EAFU,EAAKlC,MAAdgB,MACK,EAAKiB,UAAUjD,IAEzB,EAAKW,SAAS,CAACuC,aAAaA,KAnI5B,EAAKlC,MAAQ,CACRgB,MAAM,GACNkB,aAAa,GACbE,eAAc,GALJ,EAD/B,kFAUgB,GAAGb,cAAgBA,aAAakB,QAAQ,SACxC,CACI,IAAIzB,EAAQS,KAAKiB,MAAMnB,aAAakB,QAAQ,UAC5CrC,KAAKT,SAAS,CACVqB,MAAMA,OAd9B,gCAsGsBhC,GACT,IACQgC,EAASZ,KAAKJ,MAAdgB,MACD2B,GAAQ,EAQZ,OAPA3B,EAAMC,KAAI,SAACZ,EAAKO,GAET5B,IAAKqB,EAAKrB,KAET2D,EAAO/B,MAGR+B,IAjHvB,+BA0IY,IAAD,EACyCvC,KAAKJ,MAAzCgB,EADL,EACKA,MAAMoB,EADX,EACWA,cAAcF,EADzB,EACyBA,aACrBU,EAAcR,EAClB,kBAAC,EAAD,CAAUvC,uBAAwBO,KAAKiC,gBAC9BhC,KAAM6B,EACNjC,UAAWG,KAAKH,YAEnB,GACb,OACI,yBAAKtB,UAAU,kCACb,wBAAIA,UAAU,eAAd,gBACA,6BAGF,yBAAKA,UAAU,QACX,yBAAKA,WAAsC,IAA3ByB,KAAKJ,MAAMoC,cAAuB,+BAAiC,IAC9EQ,GAEL,yBAAKjE,WAAsC,IAA3ByB,KAAKJ,MAAMoC,cAAuB,8BAAgC,kCAE9E,2BACI,4BAAQzD,UAAU,kBAAkBC,KAAK,SAAS2B,QAASH,KAAK+B,cAAeU,gBAAc,QACrFC,gBAAc,aADtB,OAIA,4BAAQnE,UAAU,iBAAiB4B,QAASH,KAAKiB,aAAczC,KAAK,SAAUiE,gBAAc,SAA5F,kBAIJ,yBAAKlE,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,OAGJ,yBAAKA,UAAU,OACX,kBAAC,EAAD,CACI8B,aAAcL,KAAKK,aACnBO,MAAOA,EACPN,WAAYN,KAAKM,WACjBC,WAAYP,KAAKO,qBAjLzC,GAAyB1B,aCIL8D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.7a9d1e39.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport class Search extends Component {\n    render() {\n        return (\n            <div>\n                    \n                    <div className=\"col-xs-6 col-ms-6\">\n                            <div className=\"input-group mb-3\">\n                                <input type=\"text\" className=\"form-control\" placeholder=\"Search...\" \n                                    aria-label=\"Recipient's username\" aria-describedby=\"basic-addon2\"></input>\n                                <div className=\"input-group-append\">\n                                <span className=\"input-group-text\" id=\"basic-addon2\">Find</span>\n                                </div>\n                            </div>\n                    </div>\n                    \n   \n                \n            </div>\n        )\n    }\n}\n\nexport default Search\n","import React, { Component } from 'react'\n\n\nexport class TaskForm extends Component {\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n            id:\"\",\n            name:\"\",\n            status:\"false\"\n        }\n    }\n    componentWillMount()\n    {\n        \n        if(this.props.task)\n        {\n            this.setState({\n                id:this.props.task.id,\n                name:this.props.task.name,\n                status:this.props.task.status\n            });\n            \n        }\n    }\n    onHandleChange= (event) =>{\n        var target =  event.target;\n        var name = target.name;\n        var value = target.value;\n        console.log(value);\n        if(name===\"status\")\n            value===\"true\" ? value=true : value=false;  \n        this.setState({\n            [name]:value\n        })\n    }\n    onCloseForm = () =>{\n        this.props.onRecieveCloseTaskForm();\n    }\n    onSubmit = (event) =>{\n        event.preventDefault();\n        console.log(this.state);\n        this.props.onReceive(this.state);\n        this.onClear();\n        this.onCloseForm();\n       \n\n    }\n    onClear = () => {\n        this.setState({\n            name:'',\n            status:false\n        });\n        this.onCloseForm();\n    }\n        \n    render() {\n            var {id}=this.state;\n        return (\n            <div >\n                \n                    <form className=\"form-group  \" onSubmit={this.onSubmit}>\n                      \n                        <label ><h2>Task Option</h2></label><br></br>\n                        <label ><h3>Name: </h3></label>\n                        <input \n                                type=\"text\" \n                                onChange={this.onHandleChange} \n                                value={this.state.name}\n                                name=\"name\"className=\"form-control\" placeholder=\"\" aria-describedby=\"helpId\"></input>\n                        <label><h3>Status: </h3></label>\n                    <div className=\"form-group text-center \" >\n                    \n                        <select className=\"form-control\" \n                            name=\"status\" \n                            value={this.state.status} \n                            onChange={this.onHandleChange}>\n\n                        <option >Choose One</option>\n                        <option value={false}>Hidden</option>\n                        <option value={true}>Active</option>\n                        \n                        </select><br></br>\n                        <button className=\"btn btn-warning\" type=\"submit\" >Save</button>\n                        <button className=\"btn btn-danger\" \n                                type=\"reset\"\n                                onClick={this.onClear}>Cancel</button>\n                        \n                    </div>\n                    </form>\n                    </div>\n            \n        )\n    }\n}\n\nexport default TaskForm\n","import React, { Component } from 'react'\n\nexport class TaskItem extends Component {\n    changeStatus = () =>{\n        this.props.changeStatus(this.props.task.id);\n        //console.log(this.props.task.id);\n    }\n\n    deleteTask = () =>{\n        this.props.deleteTask(this.props.task.id);\n    }\n    changeTask = () => {\n        this.props.changeTask(this.props.task.id);\n    }\n    render() {\n        var {task , index }=this.props;\n        return (\n            \n                <tr>\n                            \n                            <td>{index+1}</td>\n                            <td>{task.name}</td>\n                            <td className=\"text-center\">\n                                <span \n                                className={task.status===true ? \" badge badge-success\" : \" badge badge-danger\"}\n                                onClick={this.changeStatus}\n                                >\n                                {task.status===true ? \"active\" : \"hidden\" }</span>\n                            </td>\n                            <td className=\"text-center\">\n                                <div className=\"btn-group\" role=\"group\" aria-label=\"\">\n                                    <button type=\"button\"\n                                            className=\"btn btn-warning\"\n                                            onClick={this.changeTask}\n                                    >Change\n                                    </button> \n                                    \n                                    <button type=\"button\" className=\"btn btn-danger\" \n                                    onClick={this.deleteTask}\n                                    >Delete</button>\n                                    \n                                </div>\n\n                            </td>\n                </tr> \n            \n        )\n    }\n}\n\nexport default TaskItem\n","import React, { Component } from 'react'\nimport TaskItem from './TaskItem'\n\nexport class Control extends Component {\n   \n    \n    render() {\n        var {tasks} = this.props;\n        var elmtasks=tasks.map((tasks,index) => {\n            return <TaskItem changeStatus={this.props.changeStatus} \n                            deleteTask={this.props.deleteTask}\n                            key={tasks.id} index={index} task={tasks}\n                            changeTask={this.props.changeTask}\n                    />;\n        });\n        return (\n            <div className=\"container-fluid\">\n                <table className=\"table table-bordered\">\n                    <thead>\n                        <tr>\n                            <th>ID</th>\n                            <th>Name</th>\n                            <th>Status</th>\n                            <th>Action</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td ></td>\n                            <td>    \n                                <input type=\"text\" className=\"form-control\" name=\"\"  aria-describedby=\"helpId\" placeholder=\"\"></input>\n                            </td>\n                            <td>    \n                                <select className=\"form-control\" name=\"\" >\n                                    <option>All</option>\n                                    <option>Hidden</option>\n                                    <option>Active</option>\n                                </select>\n                            </td>\n                            <td></td>\n                        </tr>\n                            {elmtasks}\n                    </tbody>\n                </table> \n            </div>\n        )\n    }\n}\n\nexport default Control\n","import React, { Component } from 'react'\n\n\nexport class Sort extends Component {\n    render() {\n        return (\n            <div>\n                <div className=\"col-xs-6 col-ms-6\">\n                          <select className=\"form-control\" name=\"\" >\n                            <option>A-Z</option>\n                            <option>Z-A</option>\n                            <option>Show Active</option>\n                            <option>Show Hidden</option>\n                          </select>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Sort\n","import React, { Component } from 'react'\n\nimport Search from './Components/Search';\nimport TaskForm from './Components/TaskForm';\nimport Control from './Components/Control';\nimport Sort from './Components/Sort';\n\n\nexport class App extends Component {\n            constructor(props) {\n                super(props)\n                this.state = {\n                     tasks:[],\n                     taskEditting:[],\n                     isDisplayForm:false\n                }\n            }\n            componentWillMount(){\n                if(localStorage && localStorage.getItem('tasks'))\n                {\n                    var tasks = JSON.parse(localStorage.getItem('tasks'));\n                    this.setState({\n                        tasks:tasks\n                    });\n                }\n            }\n            generateDate = () =>{\n                var tasks= [\n                    {\n                        id: this.createID(),\n                        name: \"html\",\n                        status: true\n                    },\n                    {\n                        id: this.createID(),\n                        name: \"CSS\",\n                        status: false\n                    },\n                    {\n                        id: this.createID(),\n                        name: \"Angular\",\n                        status: true\n                    }\n                ];\n                console.log(tasks);\n                this.setState({\n                    tasks : tasks\n                });\n                localStorage.setItem('tasks',JSON.stringify(tasks));\n            };\n            \n            randomString = () => {\n                var randomstring = require(\"randomstring\");\n                return randomstring.generate();\n            }\n\n            createID = () =>{\n                return this.randomString()+\"-\"+this.randomString();\n            }\n\n            \n\n            onReceive = (data) => {\n                \n                    var tasks=this.state.tasks;\n                    if(data.id===\"\" || data.id===undefined)\n                    {\n                        data.id=this.createID();\n                        tasks.push(data);\n                    }\n                    else\n                    {\n                        var index = this.findIndex(data.id)\n                        tasks[index]=data;\n                    }\n                    this.setState({\n                        tasks:tasks,\n                        taskEditting:null\n                    });\n                    localStorage.setItem(\"tasks\",JSON.stringify(tasks));\n                }\n\n            ChangeDisplay =()=>{\n            \n                this.setState({isDisplayForm:!this.state.isDisplayForm});\n            }\n        \n            OnCloseTaskForm  = () => \n            {\n                   this.setState({isDisplayForm:false});\n            } \n            OnShowTaskForm = () => \n            {\n                this.setState({isDisplayForm:true});\n            }\n\n            changeStatus =(id)=>{\n                var {tasks}=this.state;\n                var index=this.findIndex(id);\n                if(index!==-1)\n                {\n                    tasks[index].status=!tasks[index].status;\n\n                }\n                this.setState({tasks:tasks});\n                localStorage.setItem(\"tasks\",JSON.stringify(tasks));\n                \n                \n                //console.log(id);\n                }\n            findIndex(id)\n            {\n                var {tasks} = this.state;\n                var result=-1;\n                tasks.map((task,index) => {\n                    //console.log(task[index].id);\n                    if(id===task.id)\n                    {\n                        result=index; \n                    }\n                });\n                return result;\n            }\n            deleteTask = (id) =>\n            {\n                var newtasks=this.state.tasks;\n                var index=this.findIndex(id);\n                if(index!==-1)\n                {\n                    newtasks.splice(index,1);\n                    this.setState({tasks:newtasks});\n                    localStorage.setItem(\"tasks\",JSON.stringify(newtasks));\n                }\n                this.OnCloseTaskForm();\n            }\n\n            changeTask = (id) => {\n\n                this.OnShowTaskForm();\n                var {tasks} = this.state;\n                var index=this.findIndex(id);\n                var taskEditting=tasks[index];\n                this.setState({taskEditting:taskEditting});\n\n\n            }\n  render() {\n           var {tasks,isDisplayForm,taskEditting} = this.state; //var tasks = this.state.tasks\n           var elmTaskForm = isDisplayForm  ? \n           <TaskForm onRecieveCloseTaskForm={this.OnCloseTaskForm} \n                    task={taskEditting}\n                    onReceive={this.onReceive}\n\n            /> : \"\"  ;\n    return (\n        <div className=\"container border border-danger\">\n          <h1 className=\"text-center\">Task Manager</h1>\n          <hr></hr>\n        {/** top page */}\n        {/**start of page */}\n        <div className=\"row \">\n            <div className={this.state.isDisplayForm===true ? \"col-xs-4 col-md-4  col-lg-4 \" : \"\"} >\n                {elmTaskForm}\n            </div>\n            <div className={this.state.isDisplayForm===true ? \"col-xs-8 col-md-8 col-lg-8 \" : \"col-xs-12 col-md-12 col-lg-12 \"}>\n                \n                <p>\n                    <button className=\"btn btn-primary\" type=\"button\" onClick={this.ChangeDisplay} aria-expanded=\"false\"\n                            aria-controls=\"contentId\">\n                        Add\n                    </button>\n                    <button className=\"btn btn-danger\" onClick={this.generateDate} type=\"button\"  aria-expanded=\"false\">\n                        Generate Data\n                    </button>\n                </p>\n                <div className=\"row\">\n                    <Search />\n                    <Sort />\n                </div>\n                \n                <div className=\"row\">\n                    <Control \n                        changeStatus={this.changeStatus} \n                        tasks={tasks}\n                        deleteTask={this.deleteTask}\n                        changeTask={this.changeTask}\n                    />\n                </div>\n            </div>\n        </div>\n            \n\n\n        </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}